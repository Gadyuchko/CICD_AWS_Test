AWSTemplateFormatVersion: 2010-09-09
Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones if 'prod' env type variable is provided. It deploys an internet gateway, with a default
  route on the public subnets. It deploys (Optionally) a pair of NAT gateways (one in each AZ), option to create Nat instances
  and default routes for them in the private subnets.

Parameters:
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must specify prod or dev.

  NatInstanceCreation:
    Type: String
    Default: false
    AllowedValues:
      - false
      - true

  NatInstanceType:
    Description: Amazon EC2 instance type.
    Type: String
    Default: t2.micro
    ConstraintDescription: Must be a valid Amazon EC2 instance type.

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: DEV

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Mappings:
  AWSRegionToAMI:
    us-east-1:
      Linux: ami-7c807d14
    us-west-2:
      Linux: ami-1b3b462b
    eu-west-1:
      Linux: ami-672ce210
    ap-southeast-2:
      Linux: ami-6bf99c51
    ap-northeast-1:
      Linux: ami-9c2fb89c
    eu-central-1:
      Linux: ami-0c0dfedf1e4e18c3e

Conditions:
    CreateProdResources: !Equals
      - !Ref EnvType
      - prod
    CreateNatInstances: !Equals
      - !Ref NatInstanceCreation
      - true
    CreateNatInProd: !And
      - !Condition CreateProdResources
      - !Condition CreateNatInstances

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  Ipv6VPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateProdResources
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateProdResources
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
#
#  NatGateway1EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      Domain: vpc
#
#  NatGateway2EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      Domain: vpc
#
#  NatGateway1:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway1EIP.AllocationId
#      SubnetId: !Ref PublicSubnet1
#
#  NatGateway2:
#    Type: AWS::EC2::NatGateway
#    Condition: CreateProdResources
#    Properties:
#      AllocationId: !GetAtt NatGateway2EIP.AllocationId
#      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateProdResources
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: CreateNatInstances
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance1

#  DefaultPrivateRoute2:
#    Type: AWS::EC2::Route
#    Condition: CreateNatInProd
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable2
#      DestinationCidrBlock: 0.0.0.0/0
#      InstanceId: !Ref NatInstance2

# optional NGW route
#
#  DefaultPrivateRoute1:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable1
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: CreateProdResources
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)
#
# optional NGW route
#
#  DefaultPrivateRoute2:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable2
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateProdResources
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
###############################################################################
  NatInstance1:
    Type: AWS::EC2::Instance
    Condition: CreateNatInstances
    Properties:
      InstanceType: !Ref NatInstanceType
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", Linux]
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT Instance 1
#      KeyName: !Ref pSshKey
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref NatInstanceSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: 0

  NatInstance2:
    Type: AWS::EC2::Instance
    Condition: CreateNatInProd
    Properties:
      InstanceType: !Ref NatInstanceType
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT Instance 2
#      KeyName: !Ref pSshKey
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !Ref NatInstanceSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: 0

  NatInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateNatInstances
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the nat instance
      SecurityGroupIngress:
        # http & https trafic
        - CidrIp: !Ref PrivateSubnet1CIDR
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref PrivateSubnet1CIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        #ssh access
        - CidrIp: !Ref PrivateSubnet1CIDR
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        # routing
        - CidrIp: !Ref PrivateSubnet1CIDR
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Nat-SecurityGroup
###########################################################################

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-VPC"

  NatInstanceSecurityGroup:
    Description: A reference to Nat instance Security Group
    Condition: CreateNatInstances
    Value: !Ref NatInstanceSecurityGroup
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-Nat-SecurityGroup"

  PublicSubnets:
    Condition: CreateProdResources
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Condition: CreateProdResources
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-PublicSubnet1"

  PublicSubnet2:
    Condition: CreateProdResources
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-PublicSubnet2"

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-PrivateSubnet1"

  PrivateSubnet2:
    Condition: CreateProdResources
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-PrivateSubnet2"

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  Ipv6CidrBlock:
    Value: !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]

  CidrBlockAssociation:
    Value: !Select [ 0, !GetAtt VPC.CidrBlockAssociations ]