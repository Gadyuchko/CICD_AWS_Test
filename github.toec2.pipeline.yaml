AWSTemplateFormatVersion: 2010-09-09
Description: |
  Template for CICD pipeline from Github repository to EC2 container deployment. 
  STarting point is a push to repository, involves 3 stages: 
  1) test, compile, build jar executable stage - CodeBuild
  2) build docker image and push to ECR - CodeBuild
  3) deploy image from ECR to EC2 container - CodeDeploy
Parameters:
  InfrastructureStackName:
    Type: String
    Default: DEV-Infrastructure
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  CodeBuildEnvironmentImage:
    Type: String
    Default: 'aws/codebuild/standard:7.0'
  ECRRepositoryName:
    Type: String
    Default: cicd-aws-test
  DeployRegion:
    Type: String
    Default: eu-central-1
  GitHubOwner:
    Type: String
    AllowedPattern: '[A-Za-z0-9-_]+'
    Default: Gadyuchko
  GitHubRepository:
    Type: String
    AllowedPattern: '[A-Za-z0-9-_]+'
  GitHubBranch:
    Type: String
    AllowedPattern: '[A-Za-z0-9-_]+'
    Default: master
Resources:

#----------------------------------------------------#

  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: S3GetObjectPolicy
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource: '*'
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: '*'
              - Sid: ECRPolicy
                Effect: Allow
                Action:
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                Resource: '*'

#----------------------------------------------------#

  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'

#      Policies:
#        - PolicyName: root
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Sid: CloudWatchLogsPolicy
#                  Effect: Allow
#                  Action:
#                    - 'logs:CreateLogGroup'
#                    - 'logs:CreateLogStream'
#                    - 'logs:PutLogEvents'
#                  Resource: '*'


#----------------------------------------------------#

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: S3GetObjectPolicy
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource: '*'
              - Sid: CodeBuildPolicy
                Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: '*'
              - Sid: ECRPolicy
                Effect: Allow
                Action:
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                Resource: '*'
              - Sid: CodeDeployPolicy
                Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:CreateDeploymentGroup'
                  - 'codedeploy:GetApplication'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: "*"

#----------------------------------------------------#

  CodeBuildSourceCredential:
    Type: 'AWS::CodeBuild::SourceCredential'
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      #to be changed for SecretManger
      Token: '{{resolve:ssm:/github/token2:1:1682928042139}}'

#----------------------------------------------------#

  CodeBuildProjectTestAndBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-test-build'
      ServiceRole: !GetAtt
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: jarbuildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildEnvironmentImage

#----------------------------------------------------#

  CodeBuildECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName

#----------------------------------------------------#

  CodeBuildProjectDockerImage:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-build-image'
      ServiceRole: !GetAtt
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: dockerbuildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildEnvironmentImage
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT
            Value: !Ref DeployRegion
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: 410490397670
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Ref ECRRepositoryName
          - Name: IMAGE_TAG
            Type: PLAINTEXT
            Value: latest
        PrivilegedMode: true

#----------------------------------------------------#

  CodePipelineArtifactStore:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled

#----------------------------------------------------#

  CodePipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: '{{resolve:ssm:/github/token2:1:1682928042139}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: 'refs/heads/{Branch}'
        - JsonPath: '$.repository.name'
          MatchEquals: '{Repo}'
      RegisterWithThirdParty: 'true'
      TargetAction: Source
      TargetPipeline: !Ref CodePipeline
      TargetPipelineVersion: !GetAtt
        - CodePipeline
        - Version

#----------------------------------------------------#

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: TestApp
#      ComputePlatform: Server

  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
#      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Key: !ImportValue
            'Fn::Sub': '${InfrastructureStackName}-InstanceTagKey'
          Value: !ImportValue
            'Fn::Sub': '${InfrastructureStackName}-InstanceTagValue'
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
#----------------------------------------------------#

#  CodeDeployDeploymentConfig:
#    Type: AWS::CodeDeploy::DeploymentConfig
#    Properties:
#      ComputePlatform: Server
#      DeploymentConfigName: DEV single container config
#      MinimumHealthyHosts:
#        MinimumHealthyHosts
#      TrafficRoutingConfig:
#        TrafficRoutingConfig


#----------------------------------------------------#

  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStore
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: '{{resolve:ssm:/github/token2:1:1682928042139}}'
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectTestAndBuild
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: BuildImage
          Actions:
            - Name: BuildImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectDockerImage
              InputArtifacts:
                - Name: BuildOutput
              OutputArtifacts:
                - Name: ImageOutput
              RunOrder: 1
        - Name: DeployContainer
          Actions:
            - Name: DeployContainer
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployGroup
              InputArtifacts:
                - Name: ImageOutput
              RunOrder: 1