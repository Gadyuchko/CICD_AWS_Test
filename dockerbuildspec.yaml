version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG --build-arg JAR_FILE=*.jar .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

      - sed -i -e "s/LOGIN_COMMAND/aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/g" after_install.sh
      - sed -i -e "s|AWS_DEFAULT_REGION_ENV|$AWS_DEFAULT_REGION|g" start_container.sh
      - sed -i -e "s|AWS_ACCOUNT_ID_ENV|$AWS_ACCOUNT_ID|g" start_container.sh
      - sed -i -e "s|AWS_IMAGE_REPO_NAME_ENV|$IMAGE_REPO_NAME|g" start_container.sh
      - sed -i -e "s|AWS_IMAGE_TAG_ENV|$IMAGE_TAG|g" start_container.sh

artifacts:
  type: zip
  files:
    - docker-compose.yaml
    - appspec.yml
    - after_install.sh
    - start_container.sh
    - kill_container.sh