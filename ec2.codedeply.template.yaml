Description: >-
  Create instances ready for CodeDeploy and Docker container : Create EC2 instance
  with an associated instance profile and install the AWS CodeDeploy Agent.

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and vpc, that will be used in this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: SampleNetworkCrossStack
  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: Name
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployDemo
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
#  KeyPairName:
#    Description: >-
#      Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the
#      instances.
#    Type: String
#    MinLength: '1'
#    MaxLength: '255'
#    AllowedPattern: '[\x20-\x7E]*'
#    ConstraintDescription: KeyPairName is a required Field and can contain only ASCII characters.
  InstanceType:
    Description: Amazon EC2 instance type.
    Type: String
    Default: t2.micro
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
  SSHLocation:
    Description: >-
      The IP address range that can be used to connect using SSH or RDP to the
      Amazon EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionOS2AMI:
    us-east-1:
      Linux: ami-7c807d14
      Windows: ami-ac3a1cc4
    us-west-2:
      Linux: ami-1b3b462b
      Windows: ami-7f634e4f
    eu-west-1:
      Linux: ami-672ce210
      Windows: ami-032b4b74
    ap-southeast-2:
      Linux: ami-6bf99c51
      Windows: ami-a9077a93
    ap-northeast-1:
      Linux: ami-9c2fb89c
      Windows: ami-4623a846
    eu-central-1:
      Linux: ami-03aefa83246f44ef2
      Windows: ami-3e737323
Resources:
  LinuxEC2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ec2_bootstrap:
            - install_base
            - install_yum_utils
            - yum_config_manager
            - install_docker
            - install_compose
            - install_code_deploy_agent
        install_base:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LinuxEC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LinuxEC2Instance --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
        install_yum_utils:
          packages:
            yum:
              yum-utils: []
        yum_config_manager:
          commands:
            yum_config_manager:
              command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        install_docker:
          commands:
            install_latest_version:
              command:
                yum: install docker-ce docker-ce-cli containerd.io docker-buildx-plugin
            docker_for_ec2_user:
              command: usermod -G docker ec2-user
          services:
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"
        install_compose:
          commands:
            compose_from_repo:
              command:
                yum install docker-compose-plugin
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2M
    Properties:
      ImageId: !FindInMap
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - Linux
      InstanceType: !Ref InstanceType
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      NetworkInterfaces:
        - GroupSet: 'ServerSecurityGroup'
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PrivateSubnet1"
      SecurityGroups:
        - 'ServerSecurityGroup'
      UserData:
        # todo Fn::Base64:  Fn::Join  perhaps??
        Fn::Base64: !Sub |
              #!/bin/bash -xe
              # Get the latest CloudFormation package
              yum update -y aws-cfn-bootstrap
              # AWS CLI install
              yum install -y aws-cli
              # Helper function.
              - |
                function error_exit
              - |
                {
              - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
              - !Ref WaitHandle
              - |
                '
              - |2
                  exit 1
              - |
                }
              # Install the AWS CodeDeploy Agent.
              cd /home/ec2-user/
              aws s3 cp 's3://aws-codedeploy-eu-central-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeploy Agent.'
              yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.'
              # Start cfn-init
              /opt/aws/bin/cfn-init -s ${AWS::StackId} -r host1 --configsets ec2_bootstrap --region ${AWS::Region} 
              # All done so signal success
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource LinuxEC2Instance --region ${AWS::Region}      
              # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
              /opt/aws/bin/cfn-hup
#      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile

  WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Count: 1
      Handle: !Ref WaitHandle
      Timeout: '900'
  BackendSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH via port 22 from Front End SG.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref FrontSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref FrontSecurityGroup
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 from .
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref BackendSecurityGroup
  FrontSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/S and SSH access via port 80 / 443 and 22.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

#  CodeDeployTrustRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Sid: '1'
#            Effect: Allow
#            Principal:
#              Service: codedeploy.amazonaws.com
#            Action: 'sts:AssumeRole'
#      Path: /
#  CodeDeployRolePolicies:
#    Type: 'AWS::IAM::Policy'
#    Properties:
#      PolicyName: CodeDeployPolicy
#      PolicyDocument:
#        Statement:
#          - Effect: Allow
#            Resource:
#              - '*'
#            Action:
#              - 'ec2:Describe*'
#          - Effect: Allow
#            Resource:
#              - '*'
#            Action:
#              - 'autoscaling:CompleteLifecycleAction'
#              - 'autoscaling:DeleteLifecycleHook'
#              - 'autoscaling:DescribeLifecycleHooks'
#              - 'autoscaling:DescribeAutoScalingGroups'
#              - 'autoscaling:PutLifecycleHook'
#              - 'autoscaling:RecordLifecycleActionHeartbeat'
#      Roles:
#        - !Ref CodeDeployTrustRole
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  InstanceRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
          - Sid: DefPolicy
            Effect: Allow
            Action:
              - 'autoscaling:Describe*'
              - 'cloudformation:Describe*'
              - 'cloudformation:GetTemplate'
              - 's3:Get*'
            Resource: '*'
          - Sid: ECRReadOnlyPolicy
            Effect: Allow
            Action:
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetRepositoryPolicy'
              - 'ecr:DescribeRepositories'
              - 'ecr:ListImages'
              - 'ecr:DescribeImages'
              - 'ecr:BatchGetImage'
              - 'ecr:GetLifecyclePolicy'
              - 'ecr:GetLifecyclePolicyPreview'
              - 'ecr:ListTagsForResource'
              - 'ecr:DescribeImageScanFindings'
            Resource: "*"
          - Sid: CloudWatchPolicy
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
      Roles:
        - !Ref InstanceRole
  InstanceRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole